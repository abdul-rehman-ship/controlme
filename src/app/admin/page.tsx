'use client';

import { useState, useEffect } from 'react';
import { ref, set, get, child, onValue,remove ,push } from 'firebase/database';
import { db } from '../../../firebase';    
import { Button, Container, Table, Modal, Form } from 'react-bootstrap';
import Navbar from '../../components/navbar';
import { useCookies } from 'react-cookie';
import { useRouter } from 'next/navigation';
import toast, { Toaster } from 'react-hot-toast';

export default function AdminHome() {
  const [cookies, , removeCookie] = useCookies(['adminAuth']);
  const router = useRouter();
  const [showModal, setShowModal] = useState(false);
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [customers, setCustomers] = useState<Record<string, any>>({});
  const [loading, setLoading] = useState(false);
  const [editId, setEditId] = useState<string | null>(null);
  const [showStaffModal, setShowStaffModal] = useState(false);
const [selectedCustomerId, setSelectedCustomerId] = useState<string | null>(null);
const [staffs, setStaffs] = useState<Record<string, any>>({});
const [allocatedStaffs, setAllocatedStaffs] = useState<string[]>([]);


   useEffect(() => {
    toast.dismiss();
    if (!cookies.adminAuth) {
      toast.error('Please login first');
      router.push('/');
    }
  }, [cookies, router]);

  // üîπ Fetch all customers
  useEffect(() => {
    toast.dismiss();
    const customersRef = ref(db, 'Customers');
    onValue(customersRef, (snapshot) => {
      if (snapshot.exists()) setCustomers(snapshot.val());
      else setCustomers({});
    });
  }, []);
useEffect(() => {
  const staffsRef = ref(db, "Staffs");
  onValue(staffsRef, (snapshot) => {
    if (snapshot.exists()) setStaffs(snapshot.val());
    else setStaffs({});
  });
}, []);
const handleAddStaffClick = (customerId: string, customer: any) => {
  setSelectedCustomerId(customerId);
  setAllocatedStaffs(customer.allocatedStaffs || []);
  setShowStaffModal(true);
};
const handleAddStaff = async (staffId: string) => {
  if (!selectedCustomerId) return;

  const updatedStaffs = [...allocatedStaffs, staffId];
  setAllocatedStaffs(updatedStaffs);

  await set(ref(db, `Customers/${selectedCustomerId}/allocatedStaffs`), updatedStaffs);
  toast.success("Staff added to customer");
};

const handleRemoveStaff = async (staffId: string) => {
  if (!selectedCustomerId) return;

  const updatedStaffs = allocatedStaffs.filter(id => id !== staffId);
  setAllocatedStaffs(updatedStaffs);

  await set(ref(db, `Customers/${selectedCustomerId}/allocatedStaffs`), updatedStaffs);
  toast.success("Staff removed from customer");
};

  // üîπ Add or Update Customer
 const handleSaveCustomer = async () => {
  if (!username || !password) {
    toast.error("Please fill all fields");
    return;
  }

  setLoading(true);

  try {
    const dbRef = ref(db);

    if (!editId) {
      // ‚úÖ Check if username already exists
      const snapshot = await get(child(dbRef, `Customers/${username}`));
      if (snapshot.exists()) {
        toast.error("Username already exists");
        setLoading(false);
        return;
      }

      // ‚úÖ Generate unique Firebase key
      const newCustomerRef = push(ref(db, "Customers"));
      const customerId = newCustomerRef.key; // unique ID generated by Firebase

      // ‚úÖ Save new customer with empty allocatedStaffs array
      await set(newCustomerRef, {
        customerId,
        username,
        password,
        allocatedStaffs: [], // array of staff IDs later
      });

      toast.success("Customer added successfully");
    } else {
      // ‚úÖ Update existing customer (keep old ID if already there)
      const existingCustomerRef = ref(db, `Customers/${editId}`);
      await set(existingCustomerRef, {
        'customerId': editId, // keep the same ID
        username,
        password,
        allocatedStaffs: [], // optional: keep or reset
      });

      toast.success("Customer updated successfully");
    }

    setShowModal(false);
    setUsername("");
    setPassword("");
    setEditId(null);
  } catch (error) {
    console.error(error);
    toast.error("Error saving customer");
  }

  setLoading(false);
};

// üîπ Delete Customer
const handleDeleteCustomer = async () => {
  if (!editId) return;

  const confirmDelete = window.confirm("Are you sure you want to delete this customer?");
  if (!confirmDelete) return;

  setLoading(true);
  try {
    await remove(ref(db, `Customers/${editId}`));
    toast.success("Customer deleted successfully");
    setShowModal(false);
    setEditId(null);
    setUsername("");
    setPassword("");
  } catch (error) {
    console.error(error);
    toast.error("Error deleting customer");
  }
  setLoading(false);
};

// üîπ Edit Customer
const handleEdit = (customerId: string, customer: any) => {
  setUsername(customer.username);
  setPassword(customer.password);
  setEditId(customerId);
  setShowModal(true);
};


  return (
    <div className="min-h-screen bg-dark text-white">
      <Toaster position="top-center" />
      <Navbar />
      <Container className="py-5">
        <div className="d-flex justify-content-between align-items-center mb-4">
          <h2 className="fw-semi-bold">Customer Management</h2>
          <Button variant="light" onClick={() => setShowModal(true)}>
            + Add New Customer
          </Button>
        </div>

        {/* ‚úÖ Customer Table */}
        <div className="table-responsive">
          <Table striped bordered hover variant="dark" className="fw-light">
            <thead>
              <tr >
                <th >Username</th>
                <th>Password</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {Object.entries(customers).length > 0 ? (
                Object.entries(customers).map(([key, customer]) => (
                  <tr key={key}>
                    <td>{customer.username}</td>
                    <td>{customer.password}</td>
                    <td>
                      <Button
                        variant="warning"
                        size="sm"
                        className="me-2 m-1"
                        onClick={() => handleEdit(key, customer)}
                      >
                        Edit
                      </Button>
                      <Button
                            variant="success"
                            size="sm"
                            onClick={() => handleAddStaffClick(key, customer)}
                            >
                             Staffs
</Button>
                      <Button variant="info" size="sm"
                      className="me-2 mx-2" >
                        Workflow
                      </Button>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan={3} className="text-center text-muted">
                    No customers found
                  </td>
                </tr>
              )}
            </tbody>
          </Table>
        </div>

        {/* ‚úÖ Add/Edit Modal */}
       <Modal show={showModal} onHide={() => setShowModal(false)} centered>
      <Modal.Header closeButton className="bg-dark text-white">
        <Modal.Title>{editId ? "Edit Customer" : "Add New Customer"}</Modal.Title>
      </Modal.Header>

      <Modal.Body className="bg-dark text-white">
        <Form>
          <Form.Group className="mb-3">
            <Form.Label className="fw-semi-bold">Username</Form.Label>
            <Form.Control
              type="text"
              placeholder="Enter username"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              disabled={!!editId}
            />
          </Form.Group>
          <Form.Group>
            <Form.Label className="fw-semi-bold">Password</Form.Label>
            <Form.Control
              type="text"
              placeholder="Enter password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
            />
          </Form.Group>
        </Form>
      </Modal.Body>

      <Modal.Footer className="bg-dark text-white flex justify-between">
        <div>
          {editId && (
            <Button
              variant="danger"
              onClick={handleDeleteCustomer}
              disabled={loading}
              className="me-2"
            >
              {loading ? "Deleting..." : "Delete"}
            </Button>
          )}
        </div>

        <div className="d-flex">
          <Button
            variant="secondary"
            onClick={() => setShowModal(false)}
            className="me-2"
          >
            Cancel
          </Button>
          <Button variant="light" onClick={handleSaveCustomer} disabled={loading}>
            {loading ? "Saving..." : "Save"}
          </Button>
        </div>
      </Modal.Footer>
    </Modal>
    <Modal show={showStaffModal} onHide={() => setShowStaffModal(false)} centered>
  <Modal.Header closeButton className="bg-dark text-white">
    <Modal.Title>Manage Allocated Staffs</Modal.Title>
  </Modal.Header>
  <Modal.Body className="bg-dark text-white">
    <h6 className="mb-2">Allocated Staffs</h6>
    {allocatedStaffs.length > 0 ? (
      allocatedStaffs.map((id) => (
        <div
          key={id}
          className="d-flex justify-content-between align-items-center  py-1"
        >
          <span>{staffs[id]?.username || "Unknown Staff"}</span>
          <Button
            variant="danger"
            size="sm"
            onClick={() => handleRemoveStaff(id)}
          >
            ‚ùå
          </Button>
        </div>
      ))
    ) : (
      <p className="text-muted">No staff allocated.</p>
    )}

    <hr className="text-white" />

    <h6 className="mb-2">Unallocated Staffs</h6>
    {Object.entries(staffs)
      .filter(([id]) => !allocatedStaffs.includes(id))
      .map(([id, staff]) => (
        <div
          key={id}
          className="d-flex justify-content-between align-items-center  py-1"
        >
          <span>{staff.username}</span>
          <Button
            variant="success"
            size="sm"
            
            onClick={() => handleAddStaff(id)}
          >
            +
          </Button>
        </div>
      ))}
  </Modal.Body>

  <Modal.Footer className="bg-dark text-white">
    <Button variant="secondary" onClick={() => setShowStaffModal(false)}>
      Close
    </Button>
  </Modal.Footer>
</Modal>

      </Container>
    </div>
  );
}
